name: CI
on: [push, pull_request]

jobs:
  unit-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
          - os: macos-latest
            triple: x86_64-apple-darwin
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
      fail-fast: true
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: llvm-tools-preview
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Run tests
        run: cargo test -- --color always
        env:
          LLVM_PROFILE_FILE: "./cov/cov-%p-%m.profraw"
          RUSTFLAGS: "-C instrument-coverage"
      - name: Install grcov on macOS or Linux
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
        run: |
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-${{matrix.triple}}.tar.bz2 > grcov.tar.bz2
          tar xf ./grcov.tar.bz2
          ./grcov --version
      - name: Install grcov on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-${{matrix.triple}}.zip > grcov.zip
          unzip ./grcov.zip
          ./grcov --version
        shell: bash
      - name: Generate coverage results
        run: ./grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o ./cov/out.lcov
        shell: bash
      - uses: codecov/codecov-action@v2
        with:
          files: ./cov/out.lcov
      - name: Sanity check
        run: cargo run --color always -- hgrep README.md
      - run: cargo run --color always --no-default-features --features syntect-printer             -- --version
      - run: cargo run --color always --no-default-features --features bat-printer                 -- --version
      - run: cargo run --color always --no-default-features --features syntect-printer,bat-printer -- --version
      - run: cargo run --color always --no-default-features --features ripgrep,syntect-printer     -- --version
      - run: cargo run --color always --no-default-features --features ripgrep,bat-printer         -- --version
      # `head -n` exits before `cargo run` exits. Since `cargo run` does not know that, it tries to write additional
      # outputs to stdout. But the stdout is already closed by the succeeding process.
      - run: cargo run --color always -- Printer src | head -n 5
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: rustfmt
        run: cargo fmt -- --check --color always
      - name: clippy
        run: cargo clippy --color always -- -D warnings
